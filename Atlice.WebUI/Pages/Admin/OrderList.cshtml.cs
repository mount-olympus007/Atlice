using Atlice.Domain.Abstract;
using Atlice.Domain.Entities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Org.BouncyCastle.Asn1.X509;
using Shippo;
using System.Collections;
using System.Data;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;
using Order = Atlice.Domain.Entities.Order;
using Transaction = Shippo.Transaction;

namespace Atlice.WebUI.Pages.Admin
{
    [Authorize(Roles = "Adminis")]
    public class OrderListModel : PageModel
    {
        private readonly IDataRepository repository;
        private readonly IServices services;
        private static TimeZoneInfo Eastern_Standard_Time = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
        private readonly UserManager<ApplicationUser> _userManager;
        public OrderListModel(IDataRepository repository, IServices services, UserManager<ApplicationUser> userManager)
        {
            this.repository = repository;
            this.services = services;
            _userManager = userManager;
        }
        public class OrderModel
        {
            public Order order { get; set; } = new Order();
            public ApplicationUser user { get; set; } = new ApplicationUser();
            public List<OrderTapModel> UserTaps { get; set; } = new List<OrderTapModel>();
        }
        public class OrderTapModel
        {
            public AtliceTap Tap { get; set; } = new AtliceTap();
            public Order ConnectedOrder { get; set; } = new Order();
        }
        [ViewData]
        public List<OrderModel> orders { get; set; } = new List<OrderModel>();
        public async Task<IActionResult> OnGet()
        {
            var dborders = repository.Orders.ToList();
            foreach (var order in dborders)
            {
                var om = new OrderModel();
                om.order = order;
                var u = await _userManager.FindByIdAsync(order.UserId.ToString());
                if(u is not null)
                {
                    om.user = u;
                    List<AtliceTap> taps = repository.Taps.Where(x=>x.UserId == u.Id).ToList();
                    foreach(var tap in taps)
                    {
                        var otm = new OrderTapModel();
                        otm.Tap = tap;
                        var dborder = dborders.FirstOrDefault(x => x.Taps.Contains(tap));
                        if (dborder == null)
                        {
                            otm.ConnectedOrder = new Order { Name = "No Order" };
                        }
                        else
                        {
                            otm.ConnectedOrder = dborder;
                        }
                        om.UserTaps.Add(otm);
                    }
                }
                else
                {
                    om.user = new ApplicationUser { FirstName = "No", LastName = "User" };
                }
                orders.Add(om);
            }
            orders = orders.OrderByDescending(x=>x.order.OrderRecieved).ToList();
            return Page();
        }
        public async Task<IActionResult> OnPostAddNewDevice(string sku, Guid id)
        {
            Order? order = repository.Orders.FirstOrDefault(x=>x.Id== id);
            if(order is not null)
            {
                switch ((SKU)Enum.Parse(typeof(SKU),sku))
                {
                    case SKU.LGYCSTLGCD1:
                        order.LogoUrl = "../icons/LGYCSTLGCD1.png";
                        order.Comments = "Name on Card: " + order.Name + ", Company: " + order.Company + ", Role/Position: " + order.Role;
                        AtliceTap? lcard = repository.Taps.FirstOrDefault(x => x.UserId == null && x.Note == null && x.Sku == SKU.LGYCSTLGCD1);
                        if (lcard != null)
                        {
                            lcard.LastEdited = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime();
                            lcard.Note = lcard.Note + "Assigned on: " + TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime() + "; ";
                            lcard = await repository.SaveTap(lcard);
                            order.Taps.Add(lcard);
                        }
                        else
                        {
                            lcard = new AtliceTap
                            {
                                UserId = null,
                                Locked = true,
                                TapType = TapType.Card,
                                Note = "AutoGenerated, No Inventory; Assigned on: " + TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime() + "; ",
                                Sku = SKU.LGYCSTLGCD1
                            };
                            lcard = await repository.SaveTap(lcard);
                            order.Taps.Add(lcard);

                        }
                        break;
                    case SKU.CLSCDWHT:
                        AtliceTap? card = repository.Taps.FirstOrDefault(x => x.UserId == null && x.Note == null && x.Sku == SKU.CLSCDWHT && x.TapType == TapType.Card);
                        if (card != null)
                        {
                            card.LastEdited = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime();
                            card.Note = card.Note + "Assigned on: " + TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime() + "; ";
                            card = await repository.SaveTap(card);
                            order.Taps.Add(card);
                        }
                        else
                        {
                            card = new AtliceTap
                            {

                                Locked = true,
                                TapType = TapType.Card,
                                Note = "AutoGenerated, No Inventory; Assigned on: " + TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime() + "; ",
                                Sku = SKU.CLSCDWHT
                            };
                            card = await repository.SaveTap(card);
                            order.Taps.Add(card);
                        }
                        break;
                    case SKU.CLSTG25GRY1:
                        AtliceTap? tag = repository.Taps.FirstOrDefault(x => x.UserId == null && x.Note == null && x.Sku == SKU.CLSTG25GRY1);
                        if (tag != null)
                        {
                            tag.Note = tag.Note + "Assigned on: " + TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime() + "; ";
                            tag.LastEdited = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime();
                            tag = await repository.SaveTap(tag);
                            order.Taps.Add(tag);
                        }
                        else
                        {
                            tag = new AtliceTap
                            {
                                Locked = true,
                                TapType = TapType.Tag,
                                Note = "AutoGenerated, No Inventory; Assigned on: " + TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime() + "; ",
                                Sku = SKU.CLSTG25GRY1
                            };
                            order.Taps.Add(tag);
                        }
                        break;
                }
                await repository.SaveOrder(order);
                var om = new OrderModel();
                om.user = await _userManager.FindByIdAsync(order.UserId.ToString());
                om.order = order;
                om.UserTaps = new List<OrderTapModel>();
                List<AtliceTap> taps = repository.Taps.Where(x => x.UserId == om.user.Id).ToList();
                foreach (var tap in taps)
                {
                    var otm = new OrderTapModel();
                    otm.Tap = tap;
                    var dborder = repository.Orders.FirstOrDefault(x => x.Taps.Contains(tap));
                    if (dborder == null)
                    {
                        otm.ConnectedOrder = new Order { Name = "No Order" };
                    }
                    else
                    {
                        otm.ConnectedOrder = dborder;
                    }
                    om.UserTaps.Add(otm);
                }
                string view = await services.RenderToString("/pages/admin/orderlistItem.cshtml", om);

                return new JsonResult(new { view });
            }
            return RedirectToPage("OrderList");
        }
        public async Task<IActionResult> OnGetCreateDevice(Guid tapID)
        {
            AtliceTap? t = repository.Taps.FirstOrDefault(x => x.Id == tapID);
            if (t is not null)
            {
                t.Note = t.Note + "Created on " + TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime() + "; ";
                await repository.SaveTap(t);
                Domain.Entities.Order? order = repository.Orders.FirstOrDefault(x => x.Taps.Contains(t));
                if (order is not null)
                {

                    if (order.Taps.All(x => x.Note is not null && x.Note.Contains("Created on")))
                    {
                        order.Status = OrderStatus.PendingShipment;
                    }
                    else
                    {
                        order.Status = OrderStatus.PartiallyComplete;
                    }

                    await repository.SaveOrder(order);
                    var om = new OrderModel();
                    om.user = await _userManager.FindByIdAsync(order.UserId.ToString());
                    om.order = order;
                    om.UserTaps = new List<OrderTapModel>();
                    List <AtliceTap> taps = repository.Taps.Where(x => x.UserId == om.user.Id).ToList();
                    foreach (var tap in taps)
                    {
                        var otm = new OrderTapModel();
                        otm.Tap = tap;
                        var dborder = repository.Orders.FirstOrDefault(x => x.Taps.Contains(tap));
                        if (dborder == null)
                        {
                            otm.ConnectedOrder = new Order { Name = "No Order" };
                        }
                        else
                        {
                            otm.ConnectedOrder = dborder;
                        }
                        om.UserTaps.Add(otm);
                    }
                    string view = await services.RenderToString("/pages/admin/orderlistItem.cshtml", om);

                    return new JsonResult(new {view });
                }
            }
            return RedirectToPage("OrderList");
        }
        public async Task<IActionResult> OnGetCreateLabel(Guid id)
        {
            Domain.Entities.Order? order = repository.Orders.FirstOrDefault(x => x.Id == id);

            if (order.Status == OrderStatus.PendingShipment)
            {
                APIResource resource = new APIResource("shippo_live_3b19b7a30792f300c800c5457a9a1fdab2b99755\r\n\r\n");
                ShippoCollection<CarrierAccount> filteredCarrierAccounts = resource.AllCarrierAccount();
                Hashtable toAddressTable = new Hashtable();
                toAddressTable.Add("name", order.Name);
                if (!string.IsNullOrEmpty(order.Company))
                    toAddressTable.Add("company", order.Company);
                toAddressTable.Add("street1", order.ShipAddressLine1);
                if (!string.IsNullOrEmpty(order.ShipAddressLine2))
                    toAddressTable.Add("street2", order.ShipAddressLine2);

                toAddressTable.Add("city", order.ShipCity);
                if (order.ShipState.Length != 2)
                {
                    toAddressTable.Add("state", "NY");
                }
                else
                {
                    toAddressTable.Add("state", order.ShipState);
                }
                toAddressTable.Add("zip", order.ShipCode);
                toAddressTable.Add("country", "US");

                toAddressTable.Add("phone", "+1 " + order.Phone.Substring(0, 3) + " " + order.Phone.Substring(3, 3) + " " + order.Phone.Substring(6, 4));
                toAddressTable.Add("email", order.Email);

                // from address
                Hashtable fromAddressTable = new Hashtable();
                fromAddressTable.Add("name", "Alexander Oliver");
                fromAddressTable.Add("company", "SOSKYHIGH Media");
                fromAddressTable.Add("street1", "580 Flatbush ave");
                fromAddressTable.Add("street2", "17L");
                fromAddressTable.Add("city", "Brooklyn");
                fromAddressTable.Add("state", "NY");
                fromAddressTable.Add("zip", "11225");
                fromAddressTable.Add("country", "US");
                fromAddressTable.Add("email", "atlicetap@atlice.com");
                fromAddressTable.Add("phone", "+1 646 673 2325");
                //fromAddressTable.Add("metadata", "Customer ID 123456");

                // parcel
                Hashtable parcelTable = new Hashtable();
                parcelTable.Add("length", "19");
                parcelTable.Add("width", "10");
                parcelTable.Add("height", "1");
                parcelTable.Add("distance_unit", "cm");
                parcelTable.Add("weight", "1");
                parcelTable.Add("mass_unit", "oz");

                // shipment
                Hashtable shipmentTable = new Hashtable();
                shipmentTable.Add("address_to", toAddressTable);
                shipmentTable.Add("address_from", fromAddressTable);
                shipmentTable.Add("parcels", parcelTable);

                Console.WriteLine("Getting shipping label..");
                Hashtable transactionParameters = new Hashtable();
                transactionParameters.Add("shipment", shipmentTable);
                transactionParameters.Add("servicelevel_token", "usps_first");
                transactionParameters.Add("carrier_account", "16f46afaa46a4494b200d6d97f25b274");
                Transaction transaction = resource.CreateTransaction(transactionParameters);

                if (((String)transaction.Status).Equals("SUCCESS", StringComparison.OrdinalIgnoreCase))
                {
                    await repository.SaveAdminNote(new AdminNote(order.UserId, order.Name, "Created Label on " + DateTime.Now));

                    Console.WriteLine("Label url : " + transaction.LabelURL);
                    Console.WriteLine("Tracking number : " + transaction.TrackingNumber);
                    order.Tracking = transaction.TrackingNumber.ToString();
                    order.Comments = order.Comments + "Shipping URL: " + transaction.LabelURL + " ;";
                }
                await repository.SaveOrder(order);
                var om = new OrderModel();
                om.user = await _userManager.FindByIdAsync(order.UserId.ToString());
                om.order = order;
                om.UserTaps = new List<OrderTapModel>();
                List<AtliceTap> taps = repository.Taps.Where(x => x.UserId == om.user.Id).ToList();
                foreach (var tap in taps)
                {
                    var otm = new OrderTapModel();
                    otm.Tap = tap;
                    var dborder = repository.Orders.FirstOrDefault(x => x.Taps.Contains(tap));
                    if (dborder == null)
                    {
                        otm.ConnectedOrder = new Order { Name = "No Order" };
                    }
                    else
                    {
                        otm.ConnectedOrder = dborder;
                    }
                    om.UserTaps.Add(otm);
                }
                string url = transaction.LabelURL.ToString();
                
                string view = await services.RenderToString("/pages/admin/orderlistItem.cshtml", om);
                return new JsonResult(new { url,view });
            }
            return RedirectToPage("CustomerProfile", new { id = order.UserId });
        }
        public async Task<IActionResult> OnGetReadyToShip(Guid id)
        {
            Order? order = repository.Orders.FirstOrDefault(x => x.Id == id);

            if (order is not null)
            {
                foreach (var tap in order.Taps)
                {
                    tap.Note = tap.Note + "Shipped: " + TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime() + "; ";
                    tap.Locked = false;
                    await repository.SaveTap(tap);
                }
                order.Status = OrderStatus.Shipped;
                //contents = tracking number input replace
                var htm = await services.RenderToString("/pages/shared/emails/ordershipped.cshtml", order);

                order.OrderShipped = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime();
                if (!string.IsNullOrEmpty(order.Email) && !string.IsNullOrEmpty(order.Phone))
                {
                    await services.SendEmailAsync(order.Email, "Track Your Atlice Tap Shipment", htm);
                    await services.SendTextAsync(order.Phone, "Your Atlice Tap devices have been shipped! Please check your email inbox and junk folder for shipment tracking and next steps." + "\nGo to step-by-step activation guide here https://atlice.com/tap/setup on Atlice");
                    await repository.SaveAdminNote(new AdminNote(order.UserId, order.Name, "Device Shipped Text sent from fullfillment"));

                }
                await repository.SaveOrder(order);
                var om = new OrderModel();
                om.user = await _userManager.FindByIdAsync(order.UserId.ToString());
                om.order = order;
                om.UserTaps = new List<OrderTapModel>();
                List<AtliceTap> taps = repository.Taps.Where(x => x.UserId == om.user.Id).ToList();
                foreach (var tap in taps)
                {
                    var otm = new OrderTapModel();
                    otm.Tap = tap;
                    var dborder = repository.Orders.FirstOrDefault(x => x.Taps.Contains(tap));
                    if (dborder == null)
                    {
                        otm.ConnectedOrder = new Order { Name = "No Order" };
                    }
                    else
                    {
                        otm.ConnectedOrder = dborder;
                    }
                    om.UserTaps.Add(otm);
                }

                string view = await services.RenderToString("/pages/admin/orderlistItem.cshtml", om);
                return new JsonResult(new { view });
            }
            else
            {
                return RedirectToPage("Fullfillment");
            }
        }

        public async Task<IActionResult> OnGetDeleteLicense(Guid tapid)
        {
            
                await repository.DeleteTap(tapid);
            return RedirectToPage("/admin/orderlist");
        }

        public async Task<IActionResult> OnGetConnectToOrder(Guid tapid, string orderno)
        {
            AtliceTap? t = repository.Taps.FirstOrDefault(x=>x.Id== tapid);
            Order? o = repository.Orders.FirstOrDefault(x=>x.OrderNumber == orderno);
            if(t is not null && o is not null)
            {
                o.Taps.Add(t);
                await repository.SaveOrder(o);
            }
            return RedirectToPage("/admin/orderlist");
        }
        
        public async Task<IActionResult> OnGetDeleteOrder(Guid id)
        {
            
            await repository.DeleteOrder(id);
            return RedirectToPage("/admin/orderlist");
        }
        public async Task<IActionResult> OnGetRemoveDevice(Guid id)
        {
            AtliceTap? tap = repository.Taps.FirstOrDefault(y=>y.Id== id);
            if(tap is not null)
            {
                Order? o = repository.Orders.FirstOrDefault(y => y.Taps.Contains(tap));
                o.Taps.Remove(tap);
                await repository.SaveOrder(o);
                tap.UserId = null;
                tap.CustomName = null;
                tap.ForwardUrl = null;
                tap.Note = tap.Note + "Tap Removed from order on " + TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime() + "; ";
                tap.LastEdited = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, Eastern_Standard_Time).ToLocalTime();
                tap.Hits = 0;
                tap.Bypass = false;
                tap.BypassURL = null;
                tap.Locked = true;
                await repository.SaveTap(tap);
                var om = new OrderModel();
                om.user = await _userManager.FindByIdAsync(o.UserId.ToString());
                om.order = o;
                om.UserTaps = new List<OrderTapModel>();
                List<AtliceTap> taps = repository.Taps.Where(x => x.UserId == om.user.Id).ToList();
                foreach (var t in taps)
                {
                    var otm = new OrderTapModel();
                    otm.Tap = t;
                    var dborder = repository.Orders.FirstOrDefault(x => x.Taps.Contains(t));
                    if (dborder == null)
                    {
                        otm.ConnectedOrder = new Order { Name = "No Order" };
                    }
                    else
                    {
                        otm.ConnectedOrder = dborder;
                    }
                    om.UserTaps.Add(otm);
                }
                string view = await services.RenderToString("/pages/admin/orderlistItem.cshtml", om);

                return new JsonResult(new { view });
            }
            return RedirectToPage("OrderList");
        }

        public async Task<IActionResult> OnPostRemoveBookmark(Guid orderid)
        {
            Order? order = repository.Orders.FirstOrDefault(x=>x.Id == orderid);
            if (order is not null)
            {
                order.BookMarked= false;
                await repository.SaveOrder(order);
            }
            return RedirectToPage("OrderDetails", new {id = orderid});
        }
    }
}
